plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.5'
	id 'io.spring.dependency-management' version '1.1.7'
}

group = 'net.codecraft'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	querydslVersion = "5.1.0"
}

dependencies {
	// 기본 Spring 의존성
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
	implementation 'org.springframework.boot:spring-boot-starter-mail'
	implementation 'org.springframework.boot:spring-boot-starter-validation'

	// DB 및 유틸
	implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.9.0'
	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'com.mysql:mysql-connector-j'

	// JWT
	implementation 'io.jsonwebtoken:jjwt-api:0.12.6'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.6'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.6'
	
	// JSON
    implementation 'org.json:json:20230227'
    implementation 'com.opencsv:opencsv:5.7.1'

	// AWS S3
	implementation 'io.awspring.cloud:spring-cloud-aws-starter-s3:3.3.1'

	// Lombok
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	// Querydsl (jakarta 기반)
	implementation "com.querydsl:querydsl-jpa:${querydslVersion}:jakarta"
	annotationProcessor "com.querydsl:querydsl-apt:${querydslVersion}:jakarta"
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"

	// RestTemplate 응답 객체 압축 풀기
	implementation 'org.apache.httpcomponents.client5:httpclient5'

	// 테스트
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

// def querydslDir = "src/main/generated"

// sourceSets {
//     main.java.srcDirs += [ querydslDir ]
// }

// tasks.withType(JavaCompile).configureEach {
//     options.annotationProcessorGeneratedSourcesDirectory = file(querydslDir)
// }

//clean {
//    delete file(querydslDir)
//}

tasks.named('test') {
	useJUnitPlatform()
}